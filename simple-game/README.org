* PACMAT game

The aim of this eductional game is to learn mathematical series to the child.

* HOW TO PLAY

The way to play is like pacman just click a direction and the hero will continue until stop when crashes with a wall or another direction key is touched.

* Generate Fluent Holes

This algorithm is used to fill the map with a bubble and a hole alternatelly.

#+name: process-node-table
| *node*    | *label*             | *shape*   | *fillcolor* |
|---------+---------------------+---------+-----------|
| mystart | start               | ellipse | yellow    |
| mywatch | is Bob here?        | diamond |           |
| mywait  | wait for 10 minutes |         | red       |
| mytalk  | talk to Bob         |         |           |
| myend   | end                 | ellipse | green     |

#+name: process-graph
| from    | to      | label |
|---------+---------+-------|
| mystart | mywatch |       |
| mywatch | mywait  | N     |
| mywait  | mywatch |       |
| mywatch | mytalk  | Y     |
| mytalk  | myend   |       |


#+name: graph-from-tables
#+HEADER: :var nodes=process-node-table graph=process-graph
#+BEGIN_SRC emacs-lisp :file ./example-diagram.png :colnames yes :exports results
    (org-babel-execute:dot
     (concat
          "digraph {\n"
          "//rankdir=LR;\n" ;; remove comment characters '//' for horizontal layout; add for vertical layout
          (mapconcat
           (lambda (x)
             (format "%s [label=\"%s\" shape=%s style=\"filled\" fillcolor=\"%s\"]"
                             (car x)
                             (nth 1 x)
                             (if (string= "" (nth 2 x)) "box" (nth 2 x))
                             (if (string= "" (nth 3 x)) "none" (nth 3 x))
                             )) nodes "\n")
          "\n"
          (mapconcat
           (lambda (x)
             (format "%s -> %s [taillabel=\"%s\"]"
                             (car x) (nth 1 x) (nth 2 x))) graph "\n")
          "}\n") params)
#+END_SRC

#+call: graph-from-tables[:file ~/diagram-process42.png](nodes=process-node-table[2:-1],graph=process-graph[2:-1]) :results file